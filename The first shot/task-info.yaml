type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
            boolean gameFlag = true;
            startProgram();
        }

        public static void startProgram() {
            GameField gameField = new GameField();
         //   gameField.resetGrid();
            gameField.drawGrid(gameField.getGameField2DArray());

            Ship aircaft = new Ship("Aircraft Carrier", 5);

            boolean gameFlag = aircaft.landShip(gameField.getGameField2DArray(), aircaft);
            while (!gameFlag) {
                gameFlag = aircaft.landShip(gameField.getGameField2DArray(), aircaft);
            }
            gameField.drawGrid(gameField.getGameField2DArray());

            Ship battleship = new Ship("Battleship", 4);
            gameFlag = battleship.landShip(gameField.getGameField2DArray(), battleship);
            while (!gameFlag) {
                gameFlag = battleship.landShip(gameField.getGameField2DArray(), battleship);
            }
            gameField.drawGrid(gameField.getGameField2DArray());

            Ship submarine = new Ship("Submarine", 3);
            gameFlag = submarine.landShip(gameField.getGameField2DArray(), submarine);
            while (!gameFlag) {
                gameFlag = submarine.landShip(gameField.getGameField2DArray(), submarine);
            }
            gameField.drawGrid(gameField.getGameField2DArray());

            Ship cruiser = new Ship("Cruiser", 3);
            gameFlag = cruiser.landShip(gameField.getGameField2DArray(), cruiser);
            while (!gameFlag) {
                gameFlag = cruiser.landShip(gameField.getGameField2DArray(), cruiser);
            }
            gameField.drawGrid(gameField.getGameField2DArray());

            Ship destroyer = new Ship("Destroyer", 2);
            gameFlag = destroyer.landShip(gameField.getGameField2DArray(), destroyer);
            while (!gameFlag) {
                gameFlag = destroyer.landShip(gameField.getGameField2DArray(), destroyer);
            }
            gameField.drawGrid(gameField.getGameField2DArray());

        }

    }
  learner_created: false
- name: src/battleship/GameField.java
  visible: true
  text: |+
    package battleship;

    public class GameField {

        public static final int CH_1 = 65;

        public GameField() {
            resetGrid();
        }

        private float Area;
        private static final int xCordinate = 10;
        private static final int yCordinate = 10;

        private static final String[][] gameField2DArray = new String[xCordinate][yCordinate]; // 2D  integer array with x axis and y axis

        public float getArea() {
            return Area;
        }

        public void setArea(float area) {
            Area = area;
        }

        public int getxCordinate() {
            return xCordinate;
        }

        public int getyCordinate() {
            return yCordinate;
        }

        public String[][] getGameField2DArray() {
            return gameField2DArray;
        }

        public void resetGrid() {
            // let's loop through array to populate board
            for (int row = 0; row < gameField2DArray.length; row++) {
                for (int col = 0; col < gameField2DArray[row].length; col++) {
                    gameField2DArray[row][col] = "~";
                }
            }
        }

        public void drawGrid(String[][] gameField2DArray) {
            // let's loop through array to print each row and column

            //loop  to print 1 to 10.
            printColumnNumbers();
            for (int row = 0; row < gameField2DArray.length; row++) {
                //Char 65 dec -> A
                System.out.print((char) (CH_1 + row) + " ");
                for (int col = 0; col < gameField2DArray[row].length; col++) {
                    // gameField2DArray[row][col] = row * col;
                    System.out.print(gameField2DArray[row][col] + " ");
                }
                System.out.println();
            }
            System.out.println();
        }

        private static void printColumnNumbers() {
            System.out.print("  ");
            for (int i = 1; i <= GameField.yCordinate; i++) {
                System.out.print(i + " ");
            }
            System.out.println();
        }

        public static boolean isCordinateValid(int startPosition, int endPosition, int alternatePostion, String axis) {
            //checks if a given area is available and then return true.

            if (startPosition > endPosition) {
                startPosition = startPosition ^ endPosition;
                endPosition = startPosition ^ endPosition; // now y = x
                startPosition = startPosition ^ endPosition; // now x = y
            }

            for (; (startPosition <= endPosition && startPosition < gameField2DArray.length); startPosition++) {
                if (axis == "Horizontal") {
                    if (gameField2DArray[startPosition][alternatePostion] == "O") {
                        System.out.println("\nError! A ship is already present in that location\n");
                        return false;
                    }
                    if (GameField.isAdjacentToShip(gameField2DArray, alternatePostion, startPosition-1)) {
                        System.out.println("\nError! You placed it too close to another one. Try again:\n");
                        return false;
                    }
                }
                else if (axis == "Vertical"){
                    if (gameField2DArray[startPosition][alternatePostion-1] == "O") {
                        System.out.println("\nError! A ship is already present in that location\n");
                        return false;
                    }
                    if (GameField.isAdjacentToShip(gameField2DArray, startPosition, alternatePostion-1)) {
                        System.out.println("\nError! You placed it too close to another one. Try again:\n");
                        return false;
                    }
                }
            }
            return true;
        }

        public static boolean isAdjacentToShip(String[][] gameField2DArray, int row, int col) {

            String topLeft = null;
            String botLeft = null;
            String top = null;
            String bot = null;
            String topRight = null;
            String botRight = null;
            String midLeft = null;
            String midRight = null;
            try {
                topLeft = gameField2DArray[row - 1][col - 1];
            } catch (ArrayIndexOutOfBoundsException e) {
            }
            try {
                top = gameField2DArray[row-1][col];
            } catch (ArrayIndexOutOfBoundsException e) {
            }
            try {
                topRight = gameField2DArray[row - 1][col + 1];
            } catch (ArrayIndexOutOfBoundsException ex) {
            }

            try {
                midLeft = gameField2DArray[row][col - 1];
            } catch (ArrayIndexOutOfBoundsException ex) {
            }
            try {
                midRight = gameField2DArray[row][col + 1];
            } catch (ArrayIndexOutOfBoundsException  ex) {
            }

            try {
                botLeft = gameField2DArray[row + 1][col - 1];
            } catch (ArrayIndexOutOfBoundsException e) {
            }
            try {
                bot = gameField2DArray[row + 1][col];
            } catch (ArrayIndexOutOfBoundsException e) {
            }
            try {
                botRight = gameField2DArray[row + 1][col + 1];
            } catch (ArrayIndexOutOfBoundsException e) {

            }

            String zero = "O";

            return zero.equals(topLeft) || (zero.equals(top) || (zero.equals(topRight) || (zero.equals(midLeft) || (zero.equals(midRight)
                    || (zero.equals(botLeft) || (zero.equals(bot) || (zero.equals(botRight))))))));
        }
    }









  learner_created: false
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;

    import static battleship.GameField.CH_1;

    public class Ship {

        private int health;
        private int xCordinate;
        private int yCordinate;
        private String name;




        public Ship() {
        }

        public Ship(String name, int health) {
            this.name = name;
            this.health = health;
        }

        public boolean landShip(String[][] gameField2DArray, Ship ship){
            System.out.println("Enter the coordinates of the " + name +  " ("+ health + " cells" +"):\n");
            BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
            // Array of string type to store input
            String[] strNums;
            // Reading input a string
            try {
                strNums = input.readLine().split(" ");
            } catch (IOException e) {
                throw new RuntimeException("Error in Reading Landing Coordinates");
            }

            if ((strNums[0].charAt(0) != strNums[1].charAt(0)) &&  strNums[0].charAt(1) != strNums[1].charAt(1)){
                System.out.println("\nError! Wrong ship location! Try again:\n");
                return false;
            }

            //Horizontal Placements
            if (strNums[0].charAt(0) == strNums[1].charAt(0)) {
                char column = strNums[0].charAt(0);
                int x1Cordinate = column - (CH_1); //F
                int y1Coordinate = Integer.parseInt(strNums[0].substring(1));
                int y2Cordinate = Integer.parseInt(strNums[1].substring(1));

                if (y1Coordinate > y2Cordinate){
                    y1Coordinate = y1Coordinate ^ y2Cordinate;
                    y2Cordinate = y1Coordinate ^ y2Cordinate; // now y = x
                    y1Coordinate = y1Coordinate ^ y2Cordinate; // now x = y
                }
                boolean flag =  shipLengthCheckFlag(ship,y1Coordinate, y2Cordinate);
                if(!flag){
                    return false;
                }
                if (GameField.isCordinateValid(y1Coordinate, y2Cordinate, x1Cordinate, "Horizontal")) {
                    for(int j = y1Coordinate; j <= y2Cordinate; j++){
                        gameField2DArray[x1Cordinate][j-1] = "O";
                    }
                }
                else {
                    return false;
                }
            }
            //Vertical Placements
            else if (strNums[0].charAt(1) == strNums[1].charAt(1)) {
                char y1 = strNums[0].charAt(1); //Y1
                int y1Coordinate = Character.getNumericValue(y1);

                char column = strNums[0].charAt(0);
                int x1Cordinate = column - (CH_1); //x1

                char x2 = strNums[1].charAt(0);
                int x2Coordinate = x2 - (CH_1);

                if (x1Cordinate > x2Coordinate){
                    x1Cordinate = x1Cordinate ^ x2Coordinate;
                    x2Coordinate = x1Cordinate ^ x2Coordinate; // now y = x
                    x1Cordinate = x1Cordinate ^ x2Coordinate; // now x = y
                }
                boolean flag =  shipLengthCheckFlag(ship,x1Cordinate, x2Coordinate);
                if(!flag){
                    return false;
                }

                if(GameField.isCordinateValid(x1Cordinate, x2Coordinate, y1Coordinate, "Vertical")) {
                    for(int i = x1Cordinate; i <= x2Coordinate; i++) {
                        gameField2DArray[i][y1Coordinate - 1] = "O";
                    }
                }
                else{
                    return false;
                }
            }
            return true;
        }

        public int getHealth() {
            return health;
        }

        public void setHealth(int health) {
            this.health = health;
        }

        public int getxCordinate() {
            return xCordinate;
        }

        public void setxCordinate(int xCordinate) {
            this.xCordinate = xCordinate;
        }

        public int getyCordinate() {
            return yCordinate;
        }

        public void setyCordinate(int yCordinate) {
            this.yCordinate = yCordinate;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }


        public boolean shipLengthCheckFlag(Ship ship, int firstValue, int secondValue){
            int difference = (Math.abs(firstValue - secondValue)) + 1;//checking negative values
            switch (ship.getName().toUpperCase()) {
                case "AIRCRAFT":
                    if (difference != Health.AIRCRAFT.getValue()) {
                        System.out.println("\nError! Wrong length of the " + ship.getName() + "! Try again:\n");
                        return false;
                    }
                    break;
                case "SUBMARINE":
                    if (difference != Health.SUBMARINE.getValue()) {
                        System.out.println("\nError! Wrong length of the " + ship.getName() + "! Try again:\n");
                        return false;
                    }
                    break;

                case "BATTLESHIP":
                    if (difference != Health.BATTLESHIP.getValue()) {
                        System.out.println("\nError! Wrong length of the " + ship.getName() + "! Try again:\n");
                        return false;
                    }
                    break;
                case "CRUISER":
                    if (difference != Health.CRUISER.getValue()) {
                        System.out.println("\nError! Wrong length of the " + ship.getName() + "! Try again:\n");
                        return false;
                    }
                    break;
                case "DESTROYER":
                    if (difference != Health.DESTROYER.getValue()) {
                        System.out.println("\nError! Wrong length of the " + ship.getName() + "! Try again:\n");
                        return false;
                    }
                    break;
            }

            return true;
        }


    }
  learner_created: false
- name: src/battleship/Health.java
  visible: true
  text: |
    package battleship;

    public enum Health {
        AIRCRAFT("Aircraft Carrier", 5),
        BATTLESHIP("Battleship",4),
        SUBMARINE ("Submarine",3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer",2);

        private final Integer value;
        private final String key;

        Health(String key, Integer value) {
            this.value = value;
            this.key = key;
        }


        public Integer getValue() {
            return value;
        }
        public String getKey() {
            return key;
        }

        @Override
        public String toString() {
            return super.toString();
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("A1");
            checkShot(getFieldMatrix(output), "A1", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("E4");
            checkMissing(getFieldMatrix(output), "E4", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                    "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/10595#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 19 Feb 2023 20:31:13 UTC"
record: 2
